{"version":3,"sources":["webpack:///./src/utils/date.js","webpack:///./src/pages/resume.js"],"names":["dateDiff","startDate","endDate","Date","toString","years","months","date","split","end","year","getFullYear","month","getMonth","day","getDate","yy","parseInt","mm","dd","getFormattedDate","Resume","React","memo","data","location","siteTitle","site","siteMetadata","title","posts","useMemo","allMarkdownRemark","edges","keywords","map","index","node","frontmatter","key","style","marginBottom","rhythm","className","company","startdate","enddate","undefined","dangerouslySetInnerHTML","__html","html","pageQuery"],"mappings":"yMAAaA,G,8BAAW,SAACC,EAAWC,QAAsB,IAAtBA,OA0BxB,IAAIC,MAAQC,SAAS,eAzB7B,IAQIC,EAAOC,EARPC,EAAON,EAAUO,MAAM,KACvBC,EAAM,IAAIN,KAAKD,GACfQ,EAAOD,EAAIE,cACXC,EAAQH,EAAII,WAAa,EACzBC,EAAML,EAAIM,UACVC,EAAKC,SAASV,EAAK,IACnBW,EAAKD,SAASV,EAAK,IACnBY,EAAKF,SAASV,EAAK,IAcvB,OAXAD,EAASM,EAAQM,EACbJ,EAAMK,GACNb,IAGJD,EAAQK,EAAOM,EACH,IAARJ,EAAcE,EAAW,IAALI,EAAWC,IAC/Bd,IACAC,GAAU,KAGHD,EAAWA,EAAN,SAAoBA,EAAQ,EAAI,IAAM,IAAtC,IAA+C,IAA/D,KAAuEC,EAAYA,EAAN,UAAsBA,EAAS,EAAI,IAAM,IAAQ,MAO3H,IAAMc,EAAmB,SAACb,GAC7B,OAAIA,GAGJA,EAAO,IAAIJ,KAAKI,IACDM,WAAf,IAA6BN,EAAKI,cAHvB,MCrBTU,G,UAASC,IAAMC,MAAK,YAAuB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,SAC1BC,EAAYF,EAAKG,KAAKC,aAAaC,MACnCC,EAAQC,mBAAQ,kBAAMP,EAAKQ,kBAAkBC,SAEnD,OACE,kBAAC,IAAD,CAAQR,SAAUA,EAAUI,MAAOH,GACjC,sCACA,kBAAC,IAAD,CACEG,MAAM,SACNK,SAAU,CAAC,SAAD,qBAEXJ,EAAMK,KAAI,WAAWC,GAAW,IAAD,QAAlBC,EAAkB,EAAlBA,KACNR,EAAQQ,EAAKC,YAAYT,MAC/B,OACE,yBAAKU,IAAKH,GACR,wBACEI,MAAO,CACLC,aAAcC,YAAO,EAAI,KAG1Bb,GAEH,uBAAGc,UAAU,gBACX,+BAAQN,EAAKC,YAAYM,QAAzB,KAAoCP,EAAKC,YAAYb,UACrD,+BAAQL,EAAiBiB,EAAKC,YAAYO,WAA1C,gBAAyDzB,EAAgB,UAACiB,EAAKC,mBAAN,aAAC,EAAkBQ,gBAA5F,QAAwG,UAAxG,KAAqH9C,EAASqC,EAAKC,YAAYO,UAAlB,oBAA6BR,EAAKC,mBAAlC,aAA6B,EAAkBQ,eAA/C,aAA0DC,GAAvL,MAEF,yBAAKJ,UAAU,kBACbK,wBAAyB,CACvBC,OAAQZ,EAAKa,iBAYhBC,GAFE9B,YAEO,e","file":"component---src-pages-resume-js-d74d849b0e423a8338d4.js","sourcesContent":["export const dateDiff = (startDate, endDate = today()) => {\n    var date = startDate.split('-');\n    var end = new Date(endDate);\n    var year = end.getFullYear();\n    var month = end.getMonth() + 1;\n    var day = end.getDate();\n    var yy = parseInt(date[0]);\n    var mm = parseInt(date[1]);\n    var dd = parseInt(date[2]);\n    var years, months;\n    // months\n    months = month - mm;\n    if (day < dd) {\n        months--;\n    }\n    // years\n    years = year - yy;\n    if (month * 100 + day < mm * 100 + dd) {\n        years--;\n        months += 12;\n    }\n\n    return `${(years ? `${years} year${(years > 1 ? \"s\" : \"\")},` : \"\")} ${(months ? `${months} month${(months > 1 ? \"s\" : \"\")}` : \"\")}`;\n}\n\nfunction today() {\n    return (new Date()).toString(\"yyyy-MM-dd\");\n}\n\nexport const getFormattedDate = (date) => {\n    if(!date) {\n        return null;\n    }\n    date = new Date(date);\n    return `${date.getMonth()}/${date.getFullYear()}`;\n} ","import React, {useMemo} from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm } from \"../utils/typography\"\nimport {dateDiff,getFormattedDate} from \"../utils/date\"\n\nimport \"../styles/job.css\";\n\nconst Resume = React.memo(({data, location}) => {\n  const siteTitle = data.site.siteMetadata.title\n  const posts = useMemo(() => data.allMarkdownRemark.edges);\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <h1>Resume</h1>\n      <SEO\n        title=\"Resume\"\n        keywords={[`resume`, `developer`, `web`]}\n      />\n      {posts.map(({ node }, index) => {\n        const title = node.frontmatter.title\n        return (\n          <div key={index}>\n            <h3\n              style={{\n                marginBottom: rhythm(1 / 4),\n              }}\n            >\n              {title}\n            </h3>\n            <p className=\"job-location\">\n              <small>{node.frontmatter.company}, {node.frontmatter.location}</small>\n              <small>{getFormattedDate(node.frontmatter.startdate)} - {getFormattedDate(node.frontmatter?.enddate) ?? \"Current\"} ({dateDiff(node.frontmatter.startdate, node.frontmatter?.enddate ?? undefined)})</small>\n            </p>\n            <div className=\"job-description\"\n              dangerouslySetInnerHTML={{\n                __html: node.html,\n              }}\n            />\n          </div>\n        )\n      })}\n    </Layout>\n  )\n});\n\nexport default Resume\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n        sort: { fields: [frontmatter___startdate], order: DESC },\n        filter: { fileAbsolutePath: { regex: \"/jobs/\"} }) {\n      edges {\n        node {\n          html\n          frontmatter {\n            startdate(formatString: \"YYYY-MM-DD\")\n            enddate(formatString: \"YYYY-MM-DD\")\n            title\n            location\n            company\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}