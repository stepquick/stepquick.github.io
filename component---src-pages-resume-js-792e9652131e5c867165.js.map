{"version":3,"file":"component---src-pages-resume-js-792e9652131e5c867165.js","mappings":"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","sources":["webpack://squick-blog/./src/components/layout.js","webpack://squick-blog/./src/components/seo.js","webpack://squick-blog/./src/utils/date.js","webpack://squick-blog/./src/pages/resume.js"],"sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link to=\"/\" className=\"gradient-text\">\n          {title}\n        </Link>\n      </h1>\n    )\n  } else {\n    header = (\n      <Link className=\"header-link-home gradient-text\" to=\"/\">\n        {title}\n      </Link>\n    )\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">{header}</header>\n      <main>{children}</main>\n      <footer>\n        Â© Copyright 2012 - {new Date().getFullYear()}, Stephen Quick\n      </footer>\n    </div>\n  )\n}\n\nexport default Layout\n","import * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction Seo({ description, title, children }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","export const dateDiff = (startDate, endDate = today()) => {\n  var date = startDate.split(\"-\")\n  var end = new Date(endDate)\n  var year = end.getFullYear()\n  var month = end.getMonth() + 1\n  var day = end.getDate()\n  var yy = parseInt(date[0])\n  var mm = parseInt(date[1])\n  var dd = parseInt(date[2])\n  var years, months\n  // months\n  months = month - mm\n  if (day < dd) {\n    months--\n  }\n  // years\n  years = year - yy\n  if (month * 100 + day < mm * 100 + dd) {\n    years--\n    months += 12\n  }\n\n  return `${years ? `${years} year${years > 1 ? \"s\" : \"\"},` : \"\"} ${\n    months ? `${months} month${months > 1 ? \"s\" : \"\"}` : \"\"\n  }`\n}\n\nfunction today() {\n  return new Date().toString(\"yyyy-MM-dd\")\n}\n\nexport const getFormattedDate = date => {\n  if (!date) {\n    return null\n  }\n  date = new Date(date)\n  return `${date.getMonth()}/${date.getFullYear()}`\n}\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport { dateDiff, getFormattedDate } from \"../utils/date\"\n\nimport \"../styles/job.css\"\n\nconst Resume = ({ data : {site : {siteMetadata: {title: siteTitle}}, allMarkdownRemark: { edges: posts}}, location }) => {\n  return (\n    <Layout location={location} title={siteTitle}>\n      <h1>Resume</h1>\n      {posts.map(({ node }, index) => {\n        const title = node.frontmatter.title\n        return (\n          <div key={index}>\n            <h3>{title}</h3>\n            <p className=\"job-location\">\n              <small>\n                {node.frontmatter.company}, {node.frontmatter.location}\n              </small>\n              <small>\n                {getFormattedDate(node.frontmatter.startdate)} -{\" \"}\n                {getFormattedDate(node.frontmatter?.enddate) ?? \"Current\"} (\n                {dateDiff(\n                  node.frontmatter.startdate,\n                  node.frontmatter?.enddate ?? undefined\n                )}\n                )\n              </small>\n            </p>\n            <div\n              className=\"job-description\"\n              dangerouslySetInnerHTML={{\n                __html: node.html,\n              }}\n            />\n          </div>\n        )\n      })}\n    </Layout>\n  )\n}\n\nexport default Resume\n\nexport const Head = () => (\n  <Seo title=\"Resume\"/>\n)\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { frontmatter: { startdate: DESC } }\n      filter: { fileAbsolutePath: { regex: \"/jobs/\" } }\n    ) {\n      edges {\n        node {\n          html\n          frontmatter {\n            startdate(formatString: \"YYYY-MM-DD\")\n            enddate(formatString: \"YYYY-MM-DD\")\n            title\n            location\n            company\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["_ref","location","title","children","isRootPath","pathname","header","React","className","Link","to","Date","getFullYear","_site$siteMetadata","description","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","name","content","property","dateDiff","startDate","endDate","toString","years","months","date","split","end","year","month","getMonth","day","getDate","yy","parseInt","mm","dd","getFormattedDate","data","siteTitle","allMarkdownRemark","edges","posts","Layout","map","_ref2","index","_getFormattedDate","_node$frontmatter","_node$frontmatter$end","_node$frontmatter2","node","frontmatter","key","company","startdate","enddate","undefined","dangerouslySetInnerHTML","__html","html","Head","Seo"],"sourceRoot":""}