{"version":3,"sources":["webpack:///path---how-to-disable-chrome-web-security-for-development-b5bcaa415f00cdb3dc83.js","webpack:///./.cache/json/how-to-disable-chrome-web-security-for-development.json"],"names":["webpackJsonp","417","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","date","pathContext","slug","previous","fields","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,gBAAAC,OAAA,kBAAkDC,gBAAmBC,GAAA,0KAAAC,KAAA,+iDAAAC,aAAkwDL,MAAA,qDAAAM,KAAA,mBAAsFC,aAAgBC,KAAA,uDAAAC,UAA0EC,QAAUF,KAAA,6BAAmCH,aAAgBL,MAAA,4BAAmCW,MAASD,QAAUF,KAAA,gCAAsCH,aAAgBL,MAAA","file":"path---how-to-disable-chrome-web-security-for-development-b5bcaa415f00cdb3dc83.js","sourcesContent":["webpackJsonp([105583251896774],{\n\n/***/ 417:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Stephen Quick\",\"author\":\"Stephen Quick\"}},\"markdownRemark\":{\"id\":\"c:/Users/stephen/Documents/Git/gatsby-blog/stepquick.github.io/src/pages/how-to-disable-chrome-web-security-for-development/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>Recently I’ve been developing an AngularJS application that requires access to an api from another sub domain. Since the API is another sub domain, Chrome complains that it is a <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\\\">CORS</a> violation, automatically disallowing the request. This causes the application to hang forever because the route is dependent on calling this api first. What I decided to do was look up how to circumvent CORS in Google Chrome to test that it works correctly. I only need to do this locally, since I already authorized the live production version to work correctly.</p>\\n<p>The command I found was from a <a href=\\\"http://stackoverflow.com/q/3102819/1612852\\\">Stack Overflow</a> request.</p>\\n<p>On Mac: <code class=\\\"language-text\\\">open -a Google\\\\ Chrome --args --disable-web-security --user-data-dir</code>.</p>\\n<p>On Linux: <code class=\\\"language-text\\\">google-chrome --args --disable-web-security --user-data-dir</code></p>\\n<p>On Windows: <code class=\\\"language-text\\\">chrome.exe --args --disable-web-security --user-data-dir</code></p>\\n<p>The later versions of Chrome say <code class=\\\"language-text\\\">--disable-web-security</code> has been depreciated, but it still works. The flag <code class=\\\"language-text\\\">--use-data-dir</code> appears to be required for CORS to be disabled.</p>\\n<h3>Downside</h3>\\n<p>Currently working on learning more about how to disable in Firefox, Safari, and ie11/edge. I may just commit to using Chrome locally, and checking the production version from the rest of the browsers.</p>\",\"frontmatter\":{\"title\":\"How to disable Chrome Web Security for development\",\"date\":\"July 26, 2016\"}}},\"pathContext\":{\"slug\":\"/how-to-disable-chrome-web-security-for-development/\",\"previous\":{\"fields\":{\"slug\":\"/upgraded-to-octopress-3/\"},\"frontmatter\":{\"title\":\"Upgraded to Octopress 3\"}},\"next\":{\"fields\":{\"slug\":\"/disable-gpg-for-deployment/\"},\"frontmatter\":{\"title\":\"Disable GPG for Octopress Deploy\"}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---how-to-disable-chrome-web-security-for-development-b5bcaa415f00cdb3dc83.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Stephen Quick\",\"author\":\"Stephen Quick\"}},\"markdownRemark\":{\"id\":\"c:/Users/stephen/Documents/Git/gatsby-blog/stepquick.github.io/src/pages/how-to-disable-chrome-web-security-for-development/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>Recently I’ve been developing an AngularJS application that requires access to an api from another sub domain. Since the API is another sub domain, Chrome complains that it is a <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\\\">CORS</a> violation, automatically disallowing the request. This causes the application to hang forever because the route is dependent on calling this api first. What I decided to do was look up how to circumvent CORS in Google Chrome to test that it works correctly. I only need to do this locally, since I already authorized the live production version to work correctly.</p>\\n<p>The command I found was from a <a href=\\\"http://stackoverflow.com/q/3102819/1612852\\\">Stack Overflow</a> request.</p>\\n<p>On Mac: <code class=\\\"language-text\\\">open -a Google\\\\ Chrome --args --disable-web-security --user-data-dir</code>.</p>\\n<p>On Linux: <code class=\\\"language-text\\\">google-chrome --args --disable-web-security --user-data-dir</code></p>\\n<p>On Windows: <code class=\\\"language-text\\\">chrome.exe --args --disable-web-security --user-data-dir</code></p>\\n<p>The later versions of Chrome say <code class=\\\"language-text\\\">--disable-web-security</code> has been depreciated, but it still works. The flag <code class=\\\"language-text\\\">--use-data-dir</code> appears to be required for CORS to be disabled.</p>\\n<h3>Downside</h3>\\n<p>Currently working on learning more about how to disable in Firefox, Safari, and ie11/edge. I may just commit to using Chrome locally, and checking the production version from the rest of the browsers.</p>\",\"frontmatter\":{\"title\":\"How to disable Chrome Web Security for development\",\"date\":\"July 26, 2016\"}}},\"pathContext\":{\"slug\":\"/how-to-disable-chrome-web-security-for-development/\",\"previous\":{\"fields\":{\"slug\":\"/upgraded-to-octopress-3/\"},\"frontmatter\":{\"title\":\"Upgraded to Octopress 3\"}},\"next\":{\"fields\":{\"slug\":\"/disable-gpg-for-deployment/\"},\"frontmatter\":{\"title\":\"Disable GPG for Octopress Deploy\"}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/how-to-disable-chrome-web-security-for-development.json\n// module id = 417\n// module chunks = 105583251896774"],"sourceRoot":""}